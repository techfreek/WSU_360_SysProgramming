/*
 * Alex Bahm
 * Lab 3 Pre
 */


t1.c

What are the pid and ppid of the process that executes a.out? 5041, 4336
What are the pid and ppid of the CHILD process? 5042, 4336

Run a.out several times: which pid does NOT change and WHY? the parent PID does not change because the terminal is the parent in every case

t2.c

                         QUESTIONS:
(1). What's the value of status in pid=wait(&status)? The value of status in wait is the address of status
     What's the relation between the exitValue in exit(exitValue) and status in wait(&status)? It is the same value as long as there is not an error in child


(2). Insert *p = 1234; to HERE:
     Run the program again, and answer (1) again: Status in "printf("Parent %d: DEAD CHILD=%d, status=%04x\n", getpid(), pid, status);" is 008b

(3). Insert { int a,b; a = 1; b = 0; a = a/ b; } to HERE:
     Run the program again, and answer (1) again: Status in "printf("Parent %d: DEAD CHILD=%d, status=%04x\n", getpid(), pid, status);" is 0088

a.out

 1. DRAW A DIAGRAM TO SHOW EXACTLY WHAT IS argv:

 	_____________________________________________________
 	| /* filename/function */ | arg1 | arg2| ... | argN |
 	-----------------------------------------------------

(3). Run a.out. 
                   QUESTIONS:
     Which process executes a.out? shell
     which process executes b.out? shell //Both ppid's are that of the shell
 
     what are the argv[] strings in b.out? 
		argv[0] = b.out
		argv[1] = this
		argv[2] = is
		argv[3] = a
		argv[4] = test

		argv[5] = ��R��aU�
		argv[6] = ����n�ݿ��R��aU�
		argv[7] = __libc_start_main
		argv[8] = 

     HOW TO PASS env[ ] strings 
                 PATH=/a/b/c
                 HOEM=/root
                 TERM=console
     to main(int argc, char *argv[ ], char *env[ ]);
     	I can pass the env as its self. since execve takes an array of char*s, I can just pass in env in a.c and it will get passed to b.c

io.c
 At L1:     the printed line will show up on the screen.
 At L2, L3: where do the printed lines go? the lines are in 'myfile'
            WHY? because close(1) closes output to stdout AKA the terminal (in this case). When we run dup, it duplicates the file descripter of 'myfile'  to the lowest open slot which happens to be where stdout usually is.

pipe.c

1. What's a pipe? A pipe is a method of linking the output of one program to the input of another function

2. The parent is the pipe WRITER. How does it replace its fd=1 with pd[1]? It replaces it's fd=1 (stdout) with the pipe by closing fd=1, and duplicating pd[1] which places it into the file descripter slot 1.

3. The child is the pipe READER. How does it replace its fd=0 with pd[0]? It replaces it's fd=0 (stdin) with the piipe by closing fd=0 and duplicating pd[0] which places it into the lowest available slot. In this case, pd[0] gets placed into the normal stdin slot

4. MODIFY the code to let the parent be the READER and the child the WRITER. 
   Test run the program again. Child can now talk to parent